name: iOS Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  ios-build:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: true

      # Xcode/SDK 확인
      - name: Check Xcode version
        run: |
          set -euo pipefail
          xcodebuild -version
          xcrun --show-sdk-version --sdk iphoneos || true
          xcrun --show-sdk-version --sdk iphonesimulator || true

      - name: Install CocoaPods
        run: |
          set -euo pipefail
          cd ios
          bundle install
          bundle exec pod install --repo-update

      # 시뮬레이터/목표지 확인(선택)
      - name: List available simulators and destinations
        run: |
          set -euo pipefail
          echo "=== Available iOS Simulators ==="
          xcrun simctl list devices available ios || true
          echo ""
          echo "=== Available Destinations ==="
          cd ios
          xcodebuild -workspace SplitCounter.xcworkspace \
                     -scheme SplitCounter \
                     -showdestinations \
                     -configuration Debug || true

      - name: Install xcpretty
        run: |
          set -euo pipefail
          gem install xcpretty --no-document

      # UDID 기반으로 시뮬레이터 선택/부팅
      - name: Pick and boot iOS Simulator (by UDID)
        id: boot-sim
        run: |
          set -euo pipefail

          echo "=== iOS runtimes ==="
          xcrun simctl list runtimes | sed -n '/iOS/,$p' || true

          echo "=== Pick first available iPhone device ==="
          LINE=$(xcrun simctl list devices available | awk '/iOS/{in_ios=1} in_ios && /iPhone/ {print; exit}')
          if [ -z "${LINE:-}" ]; then
            echo "No iPhone simulator found"
            exit 1
          fi

          # 예: "iPhone 16 Pro (B8F5...8904F) (Shutdown)"
          UDID=$(echo "$LINE" | sed -n 's/.*(\([0-9A-F-]\{36\}\)).*/\1/p')
          NAME=$(echo "$LINE" | sed -E 's/ \([0-9A-F-]+\) \(.+\)$//')

          echo "Picked: $NAME ($UDID)"
          echo "udid=$UDID" >> "$GITHUB_OUTPUT"

          # 부팅
          xcrun simctl boot "$UDID" || true
          xcrun simctl bootstatus "$UDID" -b -d 120
          # 깨끗한 상태로
          xcrun simctl erase "$UDID" || true

      # iphonesimulator SDK + UDID로 빌드
      - name: Build iOS project (iphonesimulator)
        run: |
          set -euo pipefail
          cd ios
          xcodebuild \
            -workspace SplitCounter.xcworkspace \
            -scheme SplitCounter \
            -configuration Debug \
            -sdk iphonesimulator \
            -destination "id=${{ steps.boot-sim.outputs.udid }}" \
            -derivedDataPath build \
            build | xcpretty && exit ${PIPESTATUS[0]}

      # 빌드 산출물/로그 업로드
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ios-build-logs
          path: |
            ios/build/
            ios/Pods/
          retention-days: 7

      # 실패 시 진단 정보
      - name: Diagnostic information
        if: failure()
        run: |
          set -euo pipefail
          echo "=== System Information ==="
          sw_vers || true
          echo ""
          echo "=== Xcode Information ==="
          xcodebuild -version || true
          echo ""
          echo "=== Available SDKs ==="
          xcodebuild -showsdks || true
          echo ""
          echo "=== CocoaPods Information ==="
          cd ios
          bundle exec pod --version || true
          ls -la || true
          echo ""
          echo "=== Workspace Information ==="
          if [ -f "SplitCounter.xcworkspace/contents.xcworkspacedata" ]; then
            cat SplitCounter.xcworkspacedata
          fi