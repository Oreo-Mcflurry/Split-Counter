name: iOS Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  ios-build:
    runs-on: macos-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: true

      - name: Check Xcode and SDKs
        run: |
          set -euo pipefail
          xcodebuild -version
          xcrun simctl list runtimes
          xcrun simctl list devicetypes | sed -n '1,120p'

      - name: Install CocoaPods
        run: |
          set -euo pipefail
          cd ios
          bundle install
          bundle exec pod install --repo-update

      - name: Install xcpretty
        run: |
          set -euo pipefail
          gem install xcpretty --no-document

      # 문제 회피: "Data Migration / Gathering plugins"에 걸리는 기존 기기 대신
      # 매 빌드마다 깨끗한 임시 시뮬레이터를 생성해 사용
      - name: Create and boot fresh iOS Simulator
        id: sim
        run: |
          set -euo pipefail

          echo "=== Prefer stable iOS runtimes (18.5 -> 18.6 -> 18.4) ==="
          RUNTIMES=(
            "com.apple.CoreSimulator.SimRuntime.iOS-18-5"
            "com.apple.CoreSimulator.SimRuntime.iOS-18-6"
            "com.apple.CoreSimulator.SimRuntime.iOS-18-4"
          )

          echo "=== Pick an iPhone device type (prefer iPhone 16 Pro -> 16 -> SE 3rd) ==="
          # devicetype identifier 예: com.apple.CoreSimulator.SimDeviceType.iPhone-16-Pro
          TYPE_16_PRO=$(xcrun simctl list devicetypes | awk -F '[()]' '/iPhone 16 Pro/{print $2; exit}' || true)
          TYPE_16=$(xcrun simctl list devicetypes | awk -F '[()]' '/iPhone 16$/{print $2; exit}' || true)
          TYPE_SE3=$(xcrun simctl list devicetypes | awk -F '[()]' '/iPhone SE \(3rd generation\)/{print $2; exit}' || true)

          if [ -n "${TYPE_16_PRO:-}" ]; then
            DEVTYPE="$TYPE_16_PRO"
            DEVNAME="CI iPhone 16 Pro"
          elif [ -n "${TYPE_16:-}" ]; then
            DEVTYPE="$TYPE_16"
            DEVNAME="CI iPhone 16"
          elif [ -n "${TYPE_SE3:-}" ]; then
            DEVTYPE="$TYPE_SE3"
            DEVNAME="CI iPhone SE (3rd)"
          else
            echo "No suitable iPhone devicetype found"
            exit 1
          fi

          echo "Using device type: $DEVTYPE"

          PICKED_RT=""
          for RT in "${RUNTIMES[@]}"; do
            if xcrun simctl list runtimes | grep -q "$RT"; then
              PICKED_RT="$RT"
              break
            fi
          done

          if [ -z "$PICKED_RT" ]; then
            echo "No preferred iOS 18.x runtime found. As last resort try iOS 26.0 (beta)."
            if xcrun simctl list runtimes | grep -q "com.apple.CoreSimulator.SimRuntime.iOS-26-0"; then
              PICKED_RT="com.apple.CoreSimulator.SimRuntime.iOS-26-0"
            else
              echo "No usable iOS runtime present."
              exit 1
            fi
          fi

          echo "Picked runtime: $PICKED_RT"

          # 임시 기기 생성
          UDID=$(xcrun simctl create "$DEVNAME" "$DEVTYPE" "$PICKED_RT")
          echo "udid=$UDID" >> "$GITHUB_OUTPUT"
          echo "runtime=$PICKED_RT" >> "$GITHUB_OUTPUT"

          # 종료 훅에서 정리할 수 있도록 기록
          echo "$UDID" > /tmp/created-sim-udid

          # 부팅 및 초기화
          xcrun simctl boot "$UDID" || true
          # 부팅 완료 대기(최대 3분)
          xcrun simctl bootstatus "$UDID" -b -d 180
          # 깨끗한 상태 보장
          xcrun simctl erase "$UDID" || true
          # 재부팅 후 상태 확인
          xcrun simctl shutdown "$UDID" || true
          xcrun simctl boot "$UDID" || true
          xcrun simctl bootstatus "$UDID" -b -d 120

          # 주요 정보 출력
          xcrun simctl getenv "$UDID" SIMULATOR_RUNTIME_VERSION || true
          xcrun simctl getenv "$UDID" SIMULATOR_DEVICE_NAME || true

      - name: Show destinations (optional)
        run: |
          set -euo pipefail
          cd ios
          xcodebuild -workspace SplitCounter.xcworkspace \
                     -scheme SplitCounter \
                     -showdestinations \
                     -configuration Debug || true

      - name: Build iOS project (iphonesimulator)
        run: |
          set -euo pipefail
          cd ios
          xcodebuild \
            -workspace SplitCounter.xcworkspace \
            -scheme SplitCounter \
            -configuration Debug \
            -sdk iphonesimulator \
            -destination "id=${{ steps.sim.outputs.udid }}" \
            -derivedDataPath build \
            build | xcpretty && exit ${PIPESTATUS[0]}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ios-build-logs
          path: |
            ios/build/
            ios/Pods/
          retention-days: 7

      - name: Cleanup Simulator
        if: always()
        run: |
          set -euo pipefail
          if [ -f /tmp/created-sim-udid ]; then
            UDID=$(cat /tmp/created-sim-udid)
            xcrun simctl shutdown "$UDID" || true
            xcrun simctl delete "$UDID" || true
          fi

      - name: Diagnostics on failure
        if: failure()
        run: |
          set -euo pipefail
          echo "=== System Information ==="
          sw_vers || true
          echo ""
          echo "=== Xcode Information ==="
          xcodebuild -version || true
          echo ""
          echo "=== Available SDKs ==="
          xcodebuild -showsdks || true
          echo ""
          echo "=== Runtimes ==="
          xcrun simctl list runtimes || true
          echo ""
          echo "=== Devices (available) ==="
          xcrun simctl list devices available || true
          echo ""
          echo "=== CocoaPods Information ==="
          cd ios
          bundle exec pod --version || true
          ls -la || true
          if [ -f "SplitCounter.xcworkspace/contents.xcworkspacedata" ]; then
            echo ""
            echo "=== Workspace ==="
            cat SplitCounter.xcworkspace/contents.xcworkspacedata
          fi